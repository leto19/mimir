# -*- coding: utf-8 -*-
"""NarrativeQA-baseline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1niFMzd3iteGLG6pf21YFNPpoXGRfg3w_

# DATA
"""

import os
import pandas as pd
import torch
import time
import numpy as np
import datetime
from torch.utils.data import TensorDataset, DataLoader, SequentialSampler
#!pip install transformers

def format_time(elapsed):
  elapsed_rounded = int(round(elapsed))
  return str(datetime.timedelta(seconds=elapsed_rounded))

from google.colab import drive
drive.mount('/content/gdrive')

ROOT        = 'gdrive/Shared drives/CDT Mini-Project Team 1/Colab Notebooks/'
DATA_DIR    = ROOT + 'data/' 
MODELS_DIR  = ROOT + 'models/'
N_QA        = DATA_DIR + 'narrativeqa/'

import tensorflow as tf

device_name = tf.test.gpu_device_name()

if device_name == '/device:GPU:0':
  print('Found GPU at: {}'.format(device_name))
else:
  raise SystemError('GPU device not found')

if torch.cuda.is_available():

  device = torch.device('cuda')

  print('There are %d GPU(s) available.' % torch.cuda.device_count())
  print('We will use the GPU:'.format(device_name))

else:
  print('No GPU available, using CPU instead')
  device = torch.device('cpu')

docs = pd.read_csv(N_QA + 'documents.csv')
qaps = pd.read_csv(N_QA + 'qaps.csv')

docs = docs[(docs['set'] == 'train') & 
            (docs['kind'] == 'gutenberg')]
doc_ids = list(docs['document_id'])

qaps = qaps[(qaps['set'] == 'train') & 
            (qaps['document_id'].isin(doc_ids))] #filter questions/answers

docs.head()

qaps.head()

summaries = pd.read_csv(N_QA + 'third_party/wikipedia/summaries.csv')
summaries = summaries[(summaries['set'] == 'train') & 
                      (summaries['document_id'].isin(doc_ids))] #filter questions/answers

summaries.head()

"""# TRAINING
(Currently "training" consists of loading the SQuAD model lol)
"""

from transformers import BertForQuestionAnswering, BertTokenizer

#Get the model

MODEL_ID = MODEL_ID = 'bert-large-uncased-whole-word-masking-finetuned-squad'
model = BertForQuestionAnswering.from_pretrained(MODELS_DIR + MODEL_ID)
model.to(device)
model.eval()
tokenizer = BertTokenizer.from_pretrained(MODELS_DIR + MODEL_ID)

baskervilles = 'a7edd5dfe618e9d0fe3051af99e305362791e5e3'
question = qaps[qaps['document_id'] == baskervilles]['question'].iloc[0]
question = 'Who murdered Charles Baskerville'
context  = summaries[summaries['document_id'] == baskervilles]['summary'].iloc[0]

print(question + '\n')
print(context)

input_ids = tokenizer.encode(question, context,truncation='only_second')
print('Input length {:}'.format(len(input_ids)))

# BERT only needs the token IDs, but for the purpose of inspecting the 
# tokenizer's behavior, let's also get the token strings and display them.
tokens = tokenizer.convert_ids_to_tokens(input_ids)

# For each token and its id...
for i, (token, id) in enumerate(zip(tokens, input_ids)):
    if i == 32: break

    # If this is the [SEP] token, add some space around it to make it stand out.
    if id == tokenizer.sep_token_id:
        print('')
    
    # Print the token string and its ID in two columns.
    print('{:<12} {:>6,}'.format(token, id))

    if id == tokenizer.sep_token_id:
        print('')

sep_index = input_ids.index(tokenizer.sep_token_id)
num_tokens_question = sep_index + 1
num_tokens_context = len(input_ids) - num_tokens_question

token_type_ids = [0]*num_tokens_question + [1]*num_tokens_context

start_scores, end_scores = model(torch.tensor([input_ids]),
                                 token_type_ids=torch.tensor([token_type_ids]))

answer_start  = torch.argmax(start_scores)
answer_end    = torch.argmax(end_scores)

answer = ' '.join(tokens[answer_start:answer_end+1])

print('Question: {:}'.format(question))
print('Answer: {:}'.format(answer))

# Start with the first token.
answer = tokens[answer_start]

# Select the remaining answer tokens and join them with whitespace.
for i in range(answer_start + 1, answer_end + 1):
    
    # If it's a subword token, then recombine it with the previous token.
    if tokens[i][0:2] == '##':
        answer += tokens[i][2:]
    
    # Otherwise, add a space then the token.
    else:
        answer += ' ' + tokens[i]

print('Answer: {:}'.format(answer))

#save model

model.save_pretrained(MODELS_DIR + MODEL_ID)
tokenizer.save_pretrained(MODELS_DIR + MODEL_ID)

